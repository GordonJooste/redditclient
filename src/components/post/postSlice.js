import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { apiCall } from './Data';

const initialState = {
  subreddit: '/r/popular',
  posts: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchPostsAsync = createAsyncThunk(
  'posts/fetchPosts',
  async (subreddit) => {
    const response = await apiCall.fetchPosts(subreddit);
    // The value we return becomes the `fulfilled` action payload
    console.log('AsyncThunkPostsRequest')
    console.log(response.data.children[0]);
    return response.data.children;
  }
);

export const postSlice = createSlice({
  name: 'posts',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    changeSubreddit: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.subreddit = action.payload;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    changePosts: (state, action) => {
      state = {subreddit: state.subreddit, posts: action.payload};
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchPostsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchPostsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state = {subreddit: state.subreddit, posts: action.payload};
      });
  },
});

export const { changeSubreddit, changePosts } = postSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectPosts = (state) => state.posts;
export const selectFirstPost = (state) => state.posts[0];

export default postSlice.reducer;
